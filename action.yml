name: Vale Spell-Check
description: Run Vale for spell-checking - much faster than the official Vale action.

branding:
  icon: edit
  color: orange

inputs:
  version:
    description: Vale release version to use.
    required: false
    default: ""
  flags:
    description: Space-delimited list of flags for the Vale CLI. To see a full list of available flags, run `vale -h`.
    required: false
    default: ""
  files:
    description: Space-delimited list of file or directory arguments; equivalent to calling `vale input1 input2`.
    required: false
    default: "."
  reviewdog:
    description: Whether to use Vale with Reviewdog.
    required: false
    default: "false"
  github_token:
    description: The GitHub repo access token to be used for Reviewdog.
    required: false
    default: ${{ github.token }}
  reporter:
    description: Set the reporter type for Reviewdog.
    required: false
    default: "github-pr-review"
  fail_on_error:
    description: By default, Reviewdog will return exit code 0 even if it finds errors. If `fail_on_error` is enabled, Reviewdog exits with 1 when at least one error was reported.
    required: false
    default: "false"
  filter_mode:
    description: Set the [filter mode](https://github.com/reviewdog/reviewdog#filter-mode) for Reviewdog.
    required: false
    default: "added"

runs:
  using: composite
  steps:
    - name: 🐧 Check for Linux
      shell: bash
      run: |
        if ! [ "$RUNNER_OS" == "Linux" ]; then
          echo "::error title=runner os is $RUNNER_OS::simbo/vale-action is only for linux runners"
          exit 1
        fi

    - name: 🛠 Install Vale
      shell: bash
      run: |
        if [[ "${{ inputs.version }}" = "" ]]; then
          valeVersion="$(curl -sfL https://api.github.com/repos/errata-ai/vale/releases/latest | grep '"tag_name":' | cut -d \" -f 4 | cut -d v -f 2)"
        else
          valeVersion="${{ inputs.version }}"
        fi
        if ! [[ "$valeVersion" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          echo "::error title=invalid version::vale version '${valeVersion}' is not a valid semver version"
          exit 1
        fi
        echo "::group::Vale Installation"
        curl -sfL https://github.com/errata-ai/vale/releases/download/v${valeVersion}/vale_${valeVersion}_Linux_64-bit.tar.gz -o vale.tar.gz
        mkdir -p ${RUNNER_TEMP}/bin
        tar -xvzf vale.tar.gz -C ${RUNNER_TEMP}/bin
        rm vale.tar.gz
        echo "${RUNNER_TEMP}/bin" >> $GITHUB_PATH
        echo "::endgroup::"
        echo "::group::Syncing Vale"
        ${RUNNER_TEMP}/bin/vale sync
        echo "::endgroup::"

    - name: 🧑‍🏫 Run Vale
      if: ${{ inputs.reviewdog != 'true' }}
      shell: bash
      run: vale ${{ inputs.flags }} ${{ inputs.files }}

    - name: 🛠 Install Reviewdog
      if: ${{ inputs.reviewdog == 'true' }}
      shell: bash
      run: |
        echo "::group::Reviewdog Installation"
        curl -sfL https://raw.githubusercontent.com/reviewdog/reviewdog/master/install.sh | sh -s -- -b ${RUNNER_TEMP}/bin
        echo "::endgroup::"

    - name: 🧑‍🏫 Run Vale with Reviewdog
      if: ${{ inputs.reviewdog == 'true' }}
      shell: bash
      env:
        REVIEWDOG_GITHUB_API_TOKEN: ${{ inputs.github_token }}
      run: |
        output=$(vale --no-exit --output=$GITHUB_ACTION_PATH/rdjsonl.tmpl ${{ inputs.flags }} ${{ inputs.files }})
        echo "::group::Vale output for Reviewdog"
        echo -e "$output"
        echo "::endgroup::"
        printf "$output" | reviewdog -f=rdjsonl -name=vale -reporter=${{ inputs.reporter }} -fail-on-error=${{ inputs.fail_on_error }} -filter-mode=${{ inputs.filter_mode }} -level=info
